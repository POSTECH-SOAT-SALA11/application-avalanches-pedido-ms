name: Build, Push Docker Images to ECR and Deploy to EKS

on:
  push:
    branches:
      - main

jobs:
  build:
    environment: production
    runs-on: ubuntu-latest

    steps:
      - name: Checkout the code
        uses: actions/checkout@v3

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Login to Amazon ECR
        run: |
          aws ecr get-login-password --region sa-east-1 | docker login --username AWS --password-stdin 307946636040.dkr.ecr.sa-east-1.amazonaws.com

      - name: Build the Docker image for root service
        run: |
          docker build -t 307946636040.dkr.ecr.sa-east-1.amazonaws.com/sistema-lanchonete-avalanches:latest -f Dockerfile .

      - name: Push the Docker image for root service to ECR
        run: |
          docker push 307946636040.dkr.ecr.sa-east-1.amazonaws.com/sistema-lanchonete-avalanches:latest

      - name: Build the Docker image for sistema-pagamentos-mock
        run: |
          docker build -t 307946636040.dkr.ecr.sa-east-1.amazonaws.com/sistema-pagamento:latest -f sistema-pagamentos-mock/Dockerfile sistema-pagamentos-mock

      - name: Push the Docker image for sistema-pagamentos-mock to ECR
        run: |
          docker push 307946636040.dkr.ecr.sa-east-1.amazonaws.com/sistema-pagamento:latest

      - name: Configure Kubernetes credentials (kubectl)
        run: |
          aws eks update-kubeconfig --region sa-east-1 --name techchallenge

      # Nova etapa: Buscar secrets do AWS Secrets Manager e criar secret no Kubernetes
      - name: Retrieve Secrets from AWS Secrets Manager and create Kubernetes secret
        run: |
          secret=$(aws secretsmanager get-secret-value --secret-id dbcredentialsv2 --region sa-east-1 --query SecretString --output text)

          # Parse o JSON dos segredos
          host=$(echo $secret | jq -r '.host')
          port=$(echo $secret | jq -r '.port')
          username=$(echo $secret | jq -r '.username')
          password=$(echo $secret | jq -r '.password')
          db=$(echo $secret | jq -r '.db')
          typeorm=$(echo $secret | jq -r '.typeorm')
          redis_host=$(echo $secret | jq -r '.redis_host')
          redis_port=$(echo $secret | jq -r '.redis_port')
          redis_password=$(echo $secret | jq -r '.redis_password')

          # Criar o secret no Kubernetes
          kubectl delete secret dbcredentialsv2 || true  # Para evitar erro caso já exista
          kubectl create secret generic dbcredentialsv2 \
            --from-literal=host=$host \
            --from-literal=port=$port \
            --from-literal=username=$username \
            --from-literal=password=$password \
            --from-literal=db=$db \
            --from-literal=typeorm=$typeorm \
            --from-literal=redis_host=$redis_host \
            --from-literal=redis_port=$redis_port \
            --from-literal=redis_password=$redis_password            

      # Aplicar deployment e serviços
      - name: Deploy Avalanches App to EKS
        run: |
          kubectl apply -f kubernetes/avalanches-deployment.yaml
          kubectl apply -f kubernetes/avalanches-service.yaml
          kubectl apply -f kubernetes/hpa.yaml

      - name: Deploy Sistema Pagamento Mock to EKS
        run: |
          kubectl apply -f kubernetes/sistema-pagamento-deployment.yaml
          kubectl apply -f kubernetes/sistema-pagamento-service.yaml
